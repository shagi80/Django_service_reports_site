"""
Django settings for reportssite project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os.path
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7s%jb!#fk_z^yb14zvd@$dz_-m79e$j(!%)_#fc%z(-4_itxdc'



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.1.156', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main.apps.MainConfig',
    'servicecentres.apps.ServicecentresConfig',
    'products.apps.ProductsConfig',
    'reports.apps.ReportsConfig',
    'wkhtmltopdf',
    'importData.apps.ImportdataConfig',
    'stat_reports.apps.StatReportsConfig',
    'upload.apps.UploadConfig',
    'mail.apps.MailConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'main.middleware.LoggedInUserMiddleware',
]

ROOT_URLCONF = 'reportssite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'reportssite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_URL = 'media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/'

EMAIL_HOST = 'mail.re-nova.com'
EMAIL_HOST_USER = 'report_service@re-nova.com'
EMAIL_HOST_PASSWORD = 'Wns38Umt'
EMAIL_PORT = 25
EMAIL_USE_TLS = True
#EMAIL_USE_SSL = True

# ----------------------- логирование -------------------------------------

LOGS_DIR = os.path.join(BASE_DIR, 'logs')

ADMINS = [('shagi80', 'shagi80@mail.ru'),]

SERVER_EMAIL = 'report_service@re-nova.com'


def debug_and_info_filter(record):
    """ фильтр логов DEBUG и INFO  """
    return record.levelname == 'DEBUG' or record.levelname == 'INFO'


def warning_filter(record):
    """ фильтр логов WARNING """
    return record.levelname == 'WARNING'


def error_and_critical_filter(record):
    """ фильтр ловго ERROR и CRITICAL """
    return record.levelname == 'ERROR' or record.levelname == 'CRITICAL'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'simple': {
            'format': '{asctime} {levelname} {message}',
            'style': '{'
        },
        'pathname': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'style': '{'
        },
        'exc_info': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
            'style': '{' 
        },
        'module': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{' 
        },
    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'debug_and_info': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': debug_and_info_filter,    
        },   
        'warning': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': warning_filter,    
        },     
        'error_and_critical': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': error_and_critical_filter,    
        },
    },

    'handlers': {
        'console_DEBUG_INFO': {
            'filters': ['require_debug_true', 'debug_and_info'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_WARNING': {
            'filters': ['require_debug_true', 'warning'],
            'class': 'logging.StreamHandler',
            'formatter': 'pathname'
        },
        'console_ERROR_CRITICAL': {
            'filters': ['require_debug_true', 'error_and_critical'],
            'class': 'logging.StreamHandler',
            'formatter': 'exc_info'
        },
        'file_INFO': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename' : os.path.join(LOGS_DIR, 'general.log'),
            'filters': ['require_debug_false',],
            'formatter': 'module'
        },
        'file_ERROR_and_CRITICAL': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename' : os.path.join(LOGS_DIR, 'errors.log'),
            'filters': ['require_debug_false',],
            'formatter': 'exc_info'
        },
        'file_SECURITY': {
            'class': 'logging.FileHandler',
            'filename' : os.path.join(LOGS_DIR, 'security.log'),
            'filters': ['require_debug_false',],
            'formatter': 'module'
        },
        'mail_ERROR': {
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'level': 'ERROR',
            'formatter': 'pathname'
        },
    },

    'loggers': {      
        'django': {
            'handlers': ['console_DEBUG_INFO', 'console_WARNING', 'console_ERROR_CRITICAL', 'file_INFO',],        
        },
        'django.request': {
            'handlers': ['file_ERROR_and_CRITICAL', ],# 'mail_ERROR', ],     
        },
        'django.server': {
            'handlers': ['file_ERROR_and_CRITICAL', ],#'mail_ERROR'],   
        },
        'django.template': {
            'handlers': ['file_ERROR_and_CRITICAL',],   
        },
        'django.db_backends': {
            'handlers': ['file_ERROR_and_CRITICAL',],   
        },
        'django.security': {
            'handlers': ['file_SECURITY',],   
        },
    }
}
